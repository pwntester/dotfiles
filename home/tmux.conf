# Reattach each new window to the user bootstrap namespace
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
# This allows notifications from within tmux
# Fix copy and paste: `brew install reattach-to-user-namespace`
#set -g default-command "reattach-to-user-namespace -l $SHELL"
#set -g set-clipboard off


# Enable true color - tmux 2.2+
# https://deductivelabs.com/en/2016/03/using-true-color-vim-tmux/
# set-option -ga terminal-overrides ",xterm-256color:Tc:smcup@:rmcup@"
set -g default-terminal "xterm-256color"
#set-option -sa terminal-overrides ",xterm-kitty:RGB"
set-option -sa terminal-overrides ",xterm-kitty:Tc:smcup@:rmcup@"

# Faster escape sequences (default is 500ms).
# This helps when exiting insert mode in Vim: http://superuser.com/a/252717/65504
set -s escape-time 50
# Make neovim happy
#set -sg escape-time 0 # otherwise: 5

# Start window and pane numbering at 1, (0 is too hard to reach).
set -g base-index 1
set-window-option -g pane-base-index 1

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on
set-option -g allow-rename off

# <prefix>m to set the main-vertical layout
bind m set-window-option main-pane-width 200\; select-layout main-vertical

# allow mouse selection for yanking text 
set -g mouse on

# Remap prefix to ctrl-a
unbind C-b
set -g prefix C-Space

# vi mode for the buffer
set -g status-keys vi
setw -g mode-keys vi

# Bigger scrollback buffer
set -g history-limit 10000

# Neovim says it needs this
set-option -g focus-events on

# do not monitor activity
setw -g monitor-activity off

# Set vim style copy paste
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'V' send-keys -X select-line
bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle
#bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
bind-key -T copy-mode-vi 'y' send -X copy-pipe "kitty +kitten clipboard"

# Bindings:
# - to see current bindings:
#   tmux list-keys

# Open new/split panes with the path of the current pane.
bind c new-window -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'
bind h split-window -v -c '#{pane_current_path}'

# Resize panes
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# Resize window
set-window-option -g aggressive-resize on

# Fast toggle between current and last-used window (normally prefix-l).
#bind-key b last-window
#bind-key Space switch-client -l

# Move window order with Ctrl-Shift-Left/Right
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Rotate windows
# bind-key C-n swap-pane -s :+.top \; rotate-window -Ut :+
# bind-key C-p swap-pane -s :+.bottom \; rotate-window -Dt :+

# Cmd-k to clear screen as in terminal
# bind -n C-k send-keys -R \; clear-history

# Set a shortcut for reloading your tmux config
bind r source-file ~/.tmux.conf

set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_bg 'colour5'
set -g @prefix_highlight_fg 'black'

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
#bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
#bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
#bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
#bind-key -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
#bind-key -T copy-mode-vi C-h select-pane -L
#bind-key -T copy-mode-vi C-j select-pane -D
#bind-key -T copy-mode-vi C-k select-pane -U
#bind-key -T copy-mode-vi C-l select-pane -R
#bind-key -T copy-mode-vi 'C-\' select-pane -l

# Bind C-s to fuzzy switch session
#bind -n C-s split-window -l 10 'session=$(tmux list-sessions -F "#{session_name}" | fzf --query="$1" --select-1 --exit-0) && tmux switch-client -t "$session"' \;

# Open a "test" split-window at the bottom
bind t split-window -f -l 15 -c "#{pane_current_path}"
# Open a "test" split-window at the right
bind T split-window -h -f -p 35 -c "#{pane_current_path}"

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set -g renumber-windows on

# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column breathing room
# (default looks to be about 79).
set -w -g main-pane-width 85

# Dynamically update iTerm tab and window titles.
set -g set-titles on
set -g set-titles-string "#T : #h > #S > #W"

# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set -w -g wrap-search off

# Highlight active pane
set -g window-active-style "bg=#141824"
set -g window-style "bg=#141824"

# border colours
set -g pane-border-style "fg=#3a5488"
set -g pane-active-border-style "bg=default fg=#ffcc66"

# ----------------------
# Status Bar
# -----------------------
set-option -g status on                # turn the status bar on
set -g status-style bg=default
set -g status-interval 5               # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity
set-option -g status-position top    # position the status bar at top of screen
#set-option -g status-position bottom

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# set color for status bar
#set-option -g status-bg colour235 #base02
set-option -g status-fg yellow #yellow

# set color for status bar
#set-option -g status-bg colour235 #base02
set-option -g status-fg blue
set-window-option -g window-status-current-style fg=brightyellow
#,bg=default,bright

set -g status-left-length 10
set -g status-left ""
set -g status-right-length 10
set -g status-right ""
